name: backend-cd
on:
  push:
    branches:
      - main
      
jobs:
  Lint_Job:
    runs-on: ubuntu-latest
    defaults:  
     run:
      shell: bash
      working-directory: ./starter/backend

    steps:
      - name: Check out source repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.9.20"   
        
      - name: flake8 Lint
        uses: py-actions/flake8@v2

  TEST_JOB: 
   runs-on: ubuntu-latest
   defaults:  
     run:
      shell: bash
      working-directory: ./starter/backend
      
   steps:
     - name: Check out source repository
       uses: actions/checkout@v3

     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v2
       with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

     - name: Set up Python environment
       uses: actions/setup-python@v4
       with:
          python-version: "3.9.20"

     - name: Install pipenv
       run: pip install pipenv
       
     - name: Run tests
       run: |
           pipenv install --dev
           pip install pytest
           pip install flask 
           pip install flask_cors
           pytest test_app.py

  BUILD_JOB: 
    runs-on: ubuntu-latest
    needs: [Lint_Job, TEST_JOB]
    defaults:  
     run:
      shell: bash
      working-directory: ./starter/backend
    
    steps:
     - name: Check out code
       uses: actions/checkout@v2
    
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

     - name: Build, tag, and push image to Amazon ECR
       env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: backend
        IMAGE_TAG: build_image
       run: |
        docker build -t $TAGGED_IMAGE .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

     - name: Update kube config
       run: aws eks update-kubeconfig --name cluster --region us-east-1

     - name: Deploy to EKS
       run: |
            cd "./k8s/"
            kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            kustomize build | kubectl apply -f -
            kubectl get svc
            kubectl get pods 
